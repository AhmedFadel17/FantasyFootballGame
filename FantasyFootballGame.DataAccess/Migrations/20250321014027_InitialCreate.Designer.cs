// <auto-generated />
using System;
using FantasyFootballGame.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FantasyFootballGame.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250321014027_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.Assist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.ToTable("Assist");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FixtureId")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("TeamId");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.GoalScored", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.ToTable("GoalScored");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.OwnGoal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GoalId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoalId")
                        .IsUnique();

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnGoal");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Penalties.Penalty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FixtureId")
                        .HasColumnType("int");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsScored")
                        .HasColumnType("bit");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FixtureId");

                    b.HasIndex("GoalId");

                    b.HasIndex("TeamId");

                    b.ToTable("Penalty");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Penalties.PenaltyMiss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PenaltyId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PenaltyId")
                        .IsUnique();

                    b.ToTable("PenaltyMiss");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Penalties.PenaltySave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PenaltyId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PenaltyId")
                        .IsUnique();

                    b.ToTable("PenaltySave");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.FantasyTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("InTheBank")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("SquadValue")
                        .HasColumnType("float");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FantasyTeam");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.FantasyTeamPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FantasyTeamId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Slot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FantasyTeamId");

                    b.HasIndex("PlayerId");

                    b.ToTable("FantasyTeamPlayer");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Fixture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<int>("GameweekId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GameweekId");

                    b.ToTable("Fixture");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Gameweek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HighestPoints")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeekNumber")
                        .IsUnique();

                    b.ToTable("Gameweek");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ShirtNumber")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShirtImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.Assist", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", "Goal")
                        .WithOne("Assist")
                        .HasForeignKey("FantasyFootballGame.Domain.Models.Actions.Goals.Assist", "GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootballGame.Domain.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Goal");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootballGame.Domain.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.GoalScored", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", "Goal")
                        .WithOne("GoalScored")
                        .HasForeignKey("FantasyFootballGame.Domain.Models.Actions.Goals.GoalScored", "GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootballGame.Domain.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Goal");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.OwnGoal", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", "Goal")
                        .WithOne("ownGoal")
                        .HasForeignKey("FantasyFootballGame.Domain.Models.Actions.Goals.OwnGoal", "GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootballGame.Domain.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Goal");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Penalties.Penalty", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Fixture", "Fixture")
                        .WithMany()
                        .HasForeignKey("FixtureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId");

                    b.HasOne("FantasyFootballGame.Domain.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fixture");

                    b.Navigation("Goal");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Penalties.PenaltyMiss", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Actions.Penalties.Penalty", "Penalty")
                        .WithMany()
                        .HasForeignKey("PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Penalties.PenaltySave", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Actions.Penalties.Penalty", "Penalty")
                        .WithMany()
                        .HasForeignKey("PenaltyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Penalty");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.FantasyTeamPlayer", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.FantasyTeam", "FantasyTeam")
                        .WithMany("Players")
                        .HasForeignKey("FantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FantasyFootballGame.Domain.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FantasyTeam");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Fixture", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Gameweek", "Gameweek")
                        .WithMany("Fixtures")
                        .HasForeignKey("GameweekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gameweek");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Player", b =>
                {
                    b.HasOne("FantasyFootballGame.Domain.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Actions.Goals.Goal", b =>
                {
                    b.Navigation("Assist");

                    b.Navigation("GoalScored");

                    b.Navigation("ownGoal");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.FantasyTeam", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Gameweek", b =>
                {
                    b.Navigation("Fixtures");
                });

            modelBuilder.Entity("FantasyFootballGame.Domain.Models.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
